import org.apache.tools.ant.taskdefs.condition.Os

configurations {
	antlr
	testDependencies.extendsFrom testImplementation
}

dependencies {
	api project(":spaghetti-api")
	api "org.slf4j:slf4j-api:1.7.7"

	api "com.google.javascript:closure-compiler:v20230411"

	api "org.antlr:antlr4-runtime:4.2"
	api "commons-lang:commons-lang:2.6"
	api "commons-codec:commons-codec:1.9"
	api "commons-io:commons-io:2.4"
	api "com.google.guava:guava:17.0"
	api "com.google.code.gson:gson:2.2.4"
	api "com.github.spotbugs:spotbugs-annotations:4.7.1"
	antlr "org.antlr:antlr4:4.2"
	testImplementation "org.slf4j:slf4j-simple:1.7.7"
}

def generatedGrammar = file("${buildDir}/antlr-generated")
task generateGrammar(type: JavaExec) {
	def grammarFile = file("src/main/antlr/Module.g4")
	inputs.file grammarFile
	outputs.dir generatedGrammar
	main = "org.antlr.v4.Tool"
	args = [
			"-o", "${generatedGrammar}/com/prezi/spaghetti/internal/grammar",
			"-package", "com.prezi.spaghetti.internal.grammar",
			"-no-listener",
			"-visitor",
			grammarFile
	]
	classpath = configurations.antlr
}

idea.module {
	sourceDirs += generatedGrammar
	excludeDirs -= project.buildDir
	if (project.buildDir.exists()) {
		project.buildDir.eachDir {
			if (it != generatedGrammar) {
				excludeDirs += it
			}
		}
	}
}

sourceSets {
    main {
        java {
            srcDir generatedGrammar
        }
    }
}

compileJava {
	dependsOn generateGrammar
}

task testJar(type: Jar) {
	from sourceSets.test.output
	classifier = "tests"
}

task run(type: Exec) {
	workingDir "src/test/at"
	commandLine = ["gradle", "clean", "packApplication", "-is"]
}

task compileTsAstParser {

	def outputDir = new File(project.buildDir, "typescript")
	def outputFile = new File(outputDir, "tsAstParser.js")
	def inputFile = project.file("src/main/ts/tsAstParser.ts")

	outputs.file outputFile
	inputs.file inputFile
	inputs.file project.file("src/main/ts/package.json")
	inputs.file project.file("src/main/ts/tsconfig.json")

	doLast {
		copy {
			from "src/main/ts/"
			into outputDir
		}

		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			exec {
				workingDir outputDir
				commandLine "cmd", "/c", "npm", "install"
			}

			exec {
				workingDir outputDir
				commandLine "cmd", "/c", new File(outputDir, "node_modules/.bin/tsc.cmd").absolutePath
			}
		} else {
			exec {
				workingDir outputDir
				commandLine "npm", "install"
			}

			exec {
				workingDir outputDir
				commandLine new File(outputDir, "node_modules/.bin/tsc").absolutePath
			}
		}
	}
}

processResources {
	// Add compiled tsAstParser.js
	dependsOn compileTsAstParser
	from compileTsAstParser.outputs.files

	// Add compiled closure-compiler-wrapper.jar
	dependsOn project(":closure-compiler-wrapper").jar
	from project(":closure-compiler-wrapper").jar.outputs.files
	rename "closure-compiler-wrapper-(.*)\\.jar", "closure-compiler-wrapper.jar"

	// Put version into spaghetti.properties
	inputs.property "version", version
	filesMatching('*.properties') {
		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
				version: version
		])
	}
}


artifacts {
	testImplementation(testJar)
	archives(testJar)
}
