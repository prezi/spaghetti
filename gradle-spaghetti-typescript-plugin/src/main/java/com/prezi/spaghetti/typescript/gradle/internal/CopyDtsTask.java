package com.prezi.spaghetti.typescript.gradle.internal;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Callable;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.gradle.api.Task;
import org.gradle.api.internal.ConventionTask;
import org.gradle.api.DefaultTask;
import org.gradle.api.specs.Spec;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.InputFile;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;
import com.google.common.base.Charsets;
import com.google.common.collect.Iterables;
import com.google.common.io.Files;
import com.prezi.spaghetti.gradle.internal.DefinitionAwareSpaghettiTask;
import com.prezi.typescript.gradle.TypeScriptCompile;

public class CopyDtsTask extends ConventionTask implements DefinitionAwareSpaghettiTask {

    private File definition = null;
    private File outputDir = null;
    private TypeScriptCompile compileTask;

    public CopyDtsTask() {
        this.onlyIf(new Spec<Task>() {
            public boolean isSatisfiedBy(Task task) {
                return shouldGenerateDts();
            }
        });

    }

    public void setCompileTask(TypeScriptCompile compileTask) {
        this.compileTask = compileTask;
        compileTask.getConventionMapping().map("generateDeclarations", new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                return shouldGenerateDts();
            }
        });
    }

    private boolean shouldGenerateDts() {
        File def = this.getDefinition();
        if (def == null) {
            return false;
        } else {
            String path = def.getPath();
            return path.endsWith(".ts") && !path.endsWith(".d.ts");
        }
    }

    @InputDirectory
    public File getDeclarationDir() {
        return compileTask.getOutputDir();
    }

    public File getDefinition() {
        return definition;
    }

    public void setDefinition(Object def) {
        this.definition = getProject().file(def);
    }

    @Input
    private String getGeneratedDtsName() {
        String definitionFilename = FilenameUtils.removeExtension(getDefinition().getName());
        return definitionFilename + ".d.ts";
    }

    @OutputFile
    public File getGeneratedDtsFile() {
        return new File(getOutputDir(), getGeneratedDtsName());
    }

    public File getOutputDir() {
        return outputDir;
    }

    public void setOutputDir(File outputDir) {
        this.outputDir = outputDir;
    }

    @TaskAction
    public void run() throws IOException, InterruptedException {
        String definitionFilename = FilenameUtils.removeExtension(getDefinition().getName());
        Collection<File> files = FileUtils.listFiles(
            getDeclarationDir(),
            new NameFileFilter(getGeneratedDtsName()),
            TrueFileFilter.TRUE);

        if (files.isEmpty()) {
            throw new RuntimeException(getGeneratedDtsName() + " was not generated by " + compileTask.getName());
        }

        File generatedDts = Iterables.getOnlyElement(files);
        List<String> lines = Files.asCharSource(generatedDts, Charsets.UTF_8).readLines();
        String content = ReferenceDirectiveStripper.stripAndJoin(lines);

        Files.write(content, getGeneratedDtsFile(), Charsets.UTF_8);
    }
}